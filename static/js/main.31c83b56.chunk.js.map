{"version":3,"sources":["components/NavBarLink/NavBarLink.tsx","components/NavBar/NavBar.tsx","pages/HomePage/HomePage.tsx","pages/PageNotFound/PageNotFound.tsx","api.ts","components/Loader/Loader.tsx","components/PersonLink/PersonLink.tsx","components/PeopleTable/PeopleTable.tsx","utils/getParent.tsx","utils/getPeopleWithParents.tsx","pages/PeoplePage/PeoplePage.tsx","App.tsx","index.tsx"],"names":["NavBarLink","to","name","className","isActive","classNames","NavBar","role","HomePage","PageNotFound","API_URL","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonLink","person","slug","sex","classnames","PeopleTable","React","memo","people","useParams","paramsSlug","map","born","died","fatherName","motherName","mother","father","preparedMother","preparedFather","isPersonSelected","getParent","parent","find","getPeopleWithParents","PeoplePage","useState","setPeople","hasLoadingError","sethasLoadingError","isLoading","setIsLoading","peopleFromServer","fetchPeople","fetchedPeople","useEffect","isPeopleVisible","Boolean","length","isPeopleMessageVisible","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"qQAQaA,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACzC,cAAC,IAAD,CACEC,UAAW,gBAAGC,EAAH,EAAGA,SAAH,OACTC,IAAW,cAAe,CAAE,8BAA+BD,GADlD,EAGXH,GAAIA,EAJN,SAMGC,GAPsC,ECN9BI,EAAS,kBACpB,qBACE,UAAQ,MACRH,UAAU,iCACVI,KAAK,aACL,aAAW,kBAJb,SAME,qBAAKJ,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,EAAD,CAAYF,GAAG,IAAIC,KAAK,SACxB,cAAC,EAAD,CAAYD,GAAG,UAAUC,KAAK,iBAVhB,ECFTM,EAAW,kBACtB,oBAAIL,UAAU,QAAd,sBADsB,ECAXM,EAAe,kBAC1B,oBAAIN,UAAU,QAAd,2BAD0B,E,sCCGtBO,EAAU,oEAMT,SAASC,IAEd,OANYC,EAMA,IALL,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAxB,KAMvBI,MAAK,kBAAMC,MAAMP,EAAZ,IACLM,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAb,IARlB,IAAcP,CASb,C,UCZYQ,EAAS,kBACpB,qBAAKjB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,ECMTkB,EAA8B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACpCpB,EAAoBoB,EAApBpB,KAAMqB,EAAcD,EAAdC,KAAMC,EAAQF,EAARE,IAEpB,OACE,cAAC,IAAD,CACErB,UAAWsB,IAAW,CACpB,kBAA2B,MAARD,IAErBvB,GAAE,aAAQsB,GAJZ,SAMGrB,GAGN,ECVYwB,EAA+BC,IAAMC,MAChD,YAGO,IAFLC,EAEI,EAFJA,OAGA,EAAkCC,cAA1BP,KAAMQ,OAAd,MAA2B,GAA3B,EAEA,OACE,wBACE,UAAQ,cACR5B,UAAU,uDAFZ,UAIE,gCACE,+BACE,sCACA,qCACA,sCACA,sCACA,wCACA,6CAIJ,gCACG0B,EAAOG,KAAI,SAACV,GACX,IACEE,EAQEF,EARFE,IACAS,EAOEX,EAPFW,KACAC,EAMEZ,EANFY,KACAC,EAKEb,EALFa,WACAC,EAIEd,EAJFc,WACAb,EAGED,EAHFC,KACAc,EAEEf,EAFFe,OACAC,EACEhB,EADFgB,OAGIC,EAAiBH,GAAc,IAC/BI,EAAiBL,GAAc,IAE/BM,EAAmBV,IAAeR,EAExC,OACE,qBACE,UAAQ,SAERpB,UAAWsB,IAAW,CACpB,yBAA0BgB,IAJ9B,UAOE,6BACE,cAAC,EAAD,CAAYnB,OAAQA,MAGtB,6BAAKE,IACL,6BAAKS,IACL,6BAAKC,IACL,6BACGG,EACG,cAAC,EAAD,CAAYf,OAAQe,IACpBE,IAEN,6BACGD,EACG,cAAC,EAAD,CAAYhB,OAAQgB,IACpBE,MApBDjB,EAwBV,QAKR,I,OClFUmB,EAAY,SAACb,EAAkBc,GAC1C,OAAOd,EAAOe,MAAK,SAAAtB,GAAM,OAAIA,EAAOpB,OAASyC,CAApB,GAC1B,ECDYE,EAAuB,SAAChB,GACnC,OAAOA,EAAOG,KAAI,SAACV,GAAD,mBAAC,eACdA,GADa,IAEhBe,OAAQK,EAAUb,EAAQP,EAAOc,YACjCE,OAAQI,EAAUb,EAAQP,EAAOa,aAHjB,GAKnB,ECFYW,EAAuB,WAClC,MAA4BC,mBAAmB,IAA/C,mBAAOlB,EAAP,KAAemB,EAAf,KACA,EAA8CD,oBAAkB,GAAhE,mBAAOE,EAAP,KAAwBC,EAAxB,KACA,EAAkCH,oBAAkB,GAApD,mBAAOI,EAAP,KAAkBC,EAAlB,KAEMC,EAAgB,iDAAG,gHAErBD,GAAa,GAFQ,SAIKzC,IAJL,OAIf2C,EAJe,OAKfC,EAAgBV,EAAqBS,GAE3CN,EAAUO,GAPW,gDASrBL,GAAmB,GATE,yBAWrBE,GAAa,GAXQ,4EAAH,qDAetBI,qBAAU,WACRH,GACD,GAAE,IAEH,IAAMI,GAAmBN,GAAaO,QAAQ7B,EAAO8B,QAC/CC,GAA0BT,IAActB,EAAO8B,OAErD,OACE,qBAAKxD,UAAU,QAAf,SACE,sBAAKA,UAAU,sBAAf,UACGgD,GAAa,cAAC,EAAD,IAEbF,GACC,mBAAG,UAAQ,qBAAqB9C,UAAU,kBAA1C,kCAKDsD,GACC,cAAC/B,EAAD,CAAaG,OAAQA,IAGtB+B,GACC,mBAAG,UAAQ,kBAAX,mDAOT,EClDYC,EAAM,kBACjB,sBAAK,UAAQ,MAAb,UACE,cAAC,EAAD,IAEA,sBAAM1D,UAAU,UAAhB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO2D,KAAK,IAAIC,QAAS,cAAC,EAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,IAAD,CAAU9D,GAAG,IAAI+D,SAAO,MAErD,eAAC,IAAD,CAAOF,KAAK,UAAZ,UACE,cAAC,IAAD,CAAOG,OAAK,EAACF,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,EAAD,SAG/B,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,cAAC,EAAD,aAdd,ECCnBG,qBAAWC,SAASC,eAAe,SAChCC,OACC,cAAC,IAAD,UACE,cAAC,EAAD,M","file":"static/js/main.31c83b56.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\ntype Props = {\n  to: string;\n  name: string;\n};\n\nexport const NavBarLink: React.FC<Props> = ({ to, name }) => (\n  <NavLink\n    className={({ isActive }) => (\n      classNames('navbar-item', { 'has-background-grey-lighter': isActive })\n    )}\n    to={to}\n  >\n    {name}\n  </NavLink>\n);\n","import { NavBarLink } from '../NavBarLink';\n\nexport const NavBar = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <NavBarLink to=\"/\" name=\"Home\" />\n        <NavBarLink to=\"/people\" name=\"People\" />\n      </div>\n    </div>\n  </nav>\n);\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","export const PageNotFound = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Link } from 'react-router-dom';\nimport classnames from 'classnames';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { name, slug, sex } = person;\n\n  return (\n    <Link\n      className={classnames({\n        'has-text-danger': sex === 'f',\n      })}\n      to={`../${slug}`}\n    >\n      {name}\n    </Link>\n  );\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport { useParams } from 'react-router-dom';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink';\n\ntype Props = {\n  people: Person[];\n  // selectedPerson: number;\n};\n\nexport const PeopleTable: React.FC<Props> = React.memo(\n  ({\n    people,\n    // selectedPerson,\n  }) => {\n    const { slug: paramsSlug = '' } = useParams();\n\n    return (\n      <table\n        data-cy=\"peopleTable\"\n        className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n      >\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Sex</th>\n            <th>Born</th>\n            <th>Died</th>\n            <th>Mother</th>\n            <th>Father</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {people.map((person) => {\n            const {\n              sex,\n              born,\n              died,\n              fatherName,\n              motherName,\n              slug,\n              mother,\n              father,\n            } = person;\n\n            const preparedMother = motherName || '-';\n            const preparedFather = fatherName || '-';\n\n            const isPersonSelected = paramsSlug === slug;\n\n            return (\n              <tr\n                data-cy=\"person\"\n                key={slug}\n                className={classnames({\n                  'has-background-warning': isPersonSelected,\n                })}\n              >\n                <td>\n                  <PersonLink person={person} />\n                </td>\n\n                <td>{sex}</td>\n                <td>{born}</td>\n                <td>{died}</td>\n                <td>\n                  {mother\n                    ? <PersonLink person={mother} />\n                    : preparedMother}\n                </td>\n                <td>\n                  {father\n                    ? <PersonLink person={father} />\n                    : preparedFather}\n                </td>\n              </tr>\n            );\n          })}\n\n        </tbody>\n      </table>\n    );\n  },\n);\n","import { Person } from '../types';\n\nexport const getParent = (people: Person[], parent: string | null) => {\n  return people.find(person => person.name === parent);\n};\n","import { Person } from '../types';\nimport { getParent } from './getParent';\n\nexport const getPeopleWithParents = (people: Person[]): Person[] => {\n  return people.map((person) => ({\n    ...person,\n    mother: getParent(people, person.motherName),\n    father: getParent(people, person.fatherName),\n  }));\n};\n","import { useEffect, useState } from 'react';\nimport { getPeople } from '../../api';\nimport { Loader } from '../../components/Loader';\nimport { PeopleTable } from '../../components/PeopleTable';\nimport { Person } from '../../types';\nimport { getPeopleWithParents } from '../../utils/getPeopleWithParents';\n\nexport const PeoplePage: React.FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [hasLoadingError, sethasLoadingError] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const peopleFromServer = async () => {\n    try {\n      setIsLoading(true);\n\n      const fetchPeople = await getPeople();\n      const fetchedPeople = getPeopleWithParents(fetchPeople);\n\n      setPeople(fetchedPeople);\n    } catch {\n      sethasLoadingError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    peopleFromServer();\n  }, []);\n\n  const isPeopleVisible = !isLoading && Boolean(people.length);\n  const isPeopleMessageVisible = !isLoading && !people.length;\n\n  return (\n    <div className=\"block\">\n      <div className=\"box table-container\">\n        {isLoading && <Loader />}\n\n        {hasLoadingError && (\n          <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n            Something went wrong\n          </p>\n        )}\n\n        {isPeopleVisible && (\n          <PeopleTable people={people} />\n        )}\n\n        {isPeopleMessageVisible && (\n          <p data-cy=\"noPeopleMessage\">\n            There are no people on the server\n          </p>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport './App.scss';\nimport { NavBar } from './components/NavBar';\nimport { HomePage } from './pages/HomePage';\nimport { PageNotFound } from './pages/PageNotFound/PageNotFound';\nimport { PeoplePage } from './pages/PeoplePage';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <NavBar />\n\n    <main className=\"section\">\n      <Routes>\n        <Route path=\"/\" element={<HomePage />} />\n        <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n\n        <Route path=\"/people\">\n          <Route index element={<PeoplePage />} />\n          <Route path=\":slug\" element={<PeoplePage />} />\n        </Route>\n\n        <Route path=\"*\" element={<PageNotFound />} />\n      </Routes>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}